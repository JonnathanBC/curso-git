!!! Git !!!.- Es un control de veriones para poder trabajar en base al mismo código diff desarrolladores donde podemos tener un mejor versionado y un código más controlado, nos permite también realizar acciones que podamos regresar el código anterior, mirar los cambios en nuestro código.

  ! CONFIGURACIONES !.- git config --global este -- global es porque estamos config git a todas las carpetas de nuestro sistema y para todo el SO. Aunque también podemos tener config a nivel de repositorios o proyectos.

    1.- Abrir una terminal de comandos.
    2.- Lanzamos:
      git config --global user.name "name_user". Este nombre saldran cuando hacemos algun cambio o commit.
    3.- Lanzamos :
      git config --global user.email "email_user".

    4.- Lanzamos:
      git config --global user.ui true.
      Esto activa los colores en la terminal.

    5.- git config --list

    #asignar a vsc como editor de conf de git
    6.- git config --global core.editor "code --wait". Siempre en vsc se abrira el archivo de confg global o a nivel de proyectos. Puede ser cualquier editor de codigo como atom, php storm etc etc solo cambiamos el code por el nombre del editor de código.

    7.- git config --global -e.
    Cons esto abrimos la config de git en el vsc o editor donde le hayamos editador.

    # Para estandarizar los saltos de linea en windows
    git config --global core.autocrlf true

    # Para estandarizar los saltos de linux en linux y mac
    git config --global core.autocrlf input

    # ver todas las opciones de la cong en la terminal
    git config -h

    # ver todas las opciones de la config en el navegador
    git help config

  ! INICIAR GIT EN UN DIRECTORIO LOCAL !.- 
    1.- Abrir una terminal.
    2.- Creamos una carpeta donde deseemos:
      mkdir name_folder

    3.- Debemos crear un gitignore que nos sirve para que los archivos que no queremos que se suban al repositorio, dentro de este archivo debemos de colocar las rutas dentro del archivo
      touch .gitignore

    4.- Lanzamos git init.
    Este comando sirve para inicializar git en un proyecto. En este carpeta cualquier cambio que yo haga aqui git va a poder trackear con los comandos de git.

    5.- Opcional el code ., esto es para que abra en vsc la carpeta que hemos creado.

  ! FLUJO BASICO !. Tenemos 4 estados, estado son los pasos por los cuales va pasando nuestro código, 3 de estos estados suceden en nuestras máquinas osea son estados locales, y el último en la plataforma donde estamos subiendo nuestro código sea github, gitlab etc.

    1) Modified.- Cuando estamos moficando nuesteo código. Este sucede en el directorio de trabajo

    2) Stage.- Cuando el código pasa a estar traqueado por git. 
    Para pasar del Working Directory al stage hay estos comandos:
      - git add . este primero añade todos los archivos que hemos modifcado.

      - git add nombre_file
    Aun estando en el stage podemos rechazar algunos cambios, esta es una zona donde estaremos trabajando usualmente

    3) Commit.- Ya cuando en la cabeza del repo de git tiene los cambios, es decir, estar al dia localmente.
    Para pasar del Stage al Commit hay el sig comando:
      - git commit -m "Message commit".
      Esto sirve para registra en el historico de nuestro proyecto, pasamos del stage a la cabeza del repo local en git. 

    4) Remote.- Cuando subimos el código al guna plataforma.
    Para pasar de commited al remote existe los sig comandos:
      - git push.- Para poder subir los cambios que hemoshecho al repositorio en remote.

      - git push -u origin name_branch.- Este es igual que el anterior si no que el -u lo que hace es enviar la rama al repo rmeoto si no hemos hecho al subida de la rama manual.

  Por ejm si un compañero realizo un cambio en nuestro código y lo subio a repo remoto, lo más recomnedable y lo que siempre se debe de hacer es descrgar los cambios, siempre como buena práctica, antes de empezar a trabajar o desarrollar es es descrgar los cambios del remoto al local.
  Esto lo podemos hacer con el comando:
    - git pull

  ! COMANDOS DE GIT !.-
    - git add . .- Añade todos los archivos modificados.
    - git add name_file.- Añade solo el archivo o carpeta que le pasemos como parametro.

    - git commit -m "Message".- Sirve para hacer el commit de los cambios.

    - git remote add origin url_git_repo.- Este nos permote a nosotros poder vincular el repositorio remoto con nuestro código en git. Así podremos realizar las acciones de push hacia el remoto.

    - git branch -M name_new_branch.- Este comando nos permite a nosotros cmabiar el nombre de nuestra rama, por defecto viene master, podemos cambiarle al nombre que se usa actualmente main quedaría :
      - git branch -M main

    - git push -u origin name_branch.- Este se usa casi siempre una vez por cada rama que nosotros creamos es decir i tenemos una rama en git que se llame users, esta rama esta a nivel local, enotonces nosotros debemos de enviar esa rama también al remoto para que sepa de donde vino ese código, entonces si no lo hacemos manualemente lanzamos el comando git push -u origin users x ejm.

    - git push.- Empuja los cambios al repo remoto.

    - git status
    Me indica el estado del los archivos mmodificados.

    - git log.- Me indica el commit anterior hecho hacia el remoto. Nos muestra el historial de todos los commits que tiene el repositorio.

    - git log --oneline.- Este comando nos muestra igual que el log pero linea por line, es decir en una linea un commit, en otra otro etc etc.

    - git pull.- Este nos permite obtener todos los cmabios que tenemos en el remoto hacia el local. Como buena oráctica debemos de siempre lanzar este comando para poder descragar los cmabios que estén hecho de nuestro equipo de desarrolo siempre siempre.

    Pasos para cambiar la rama master a main una vez hecho algun tipo de push al remoto:

    - git branch -m master main
      Crea la rama main y pasa el historial de la rama master a main.

    - git push -u origin main

    - git symbolic-ref refs/remotes/origin/HEAD refs/remotes/origin/main
    Este comando cambia el HEAD actual a la rama main.

    - Cambiar la rama default de master a main en tu repo de Git. 
    Entramos a github, vamos a settings del repositorio, Entramos a Settings/Branches buscamos un item que diga Default branch y ahi podemos intercambiar la rama a main para que sea la principal en nuestro repo. 

    - git push origin -delete master
    Esto elimina la rama master del reposritorio.

  ! GIT IGNORE !.- NOs sirve para poder ingnorar archivos que no queremos que se suban al remoto, podrían ser archivos de claves, llaves, apis etc etc. Necesitamos crear en la raiz de nuestro poryecto un archivo que se llame .gitignore y aqui podemos colocar los archivos que deseamos siendo slash(/) la raíz de nuestro proyecto ejm:
  
  .gitignore
  # Esto es un comentario
  archivo.net
  carpeta
  /archivo_desde_raiz.ext

  #ignora todos los archivos que terminen el log, el asterisco lo que hace es funcionar como una expresio regular donde le colocamos el asterico y dice todos los archivos que...
    *.log x ejm este indica que todos los archivos .log se ignoren

  # ! este simbolo lo que nos indica excepto, es decir, ignora otros excepto este ejm:
    !production.log excepto el achivo production.log.

  doc/*.text.- esta forma indica que ignore todos los archivo terminados en .txt dentro de la carpeta doc pero no es subscarpetas.

  doc/**/*.txt.- Ignorar todos los archivos terminados en .txt dentro la carpeta doc y tambien en sus subcarpeta.

  Existe una página llama gitignore.io, donde aqui le pasamos la tecnologia que estamos usando como node, php, react etc etc y nos devuelve un archivo con todos lo que se puede ignorar.

  ! RAMAS !.- Las ramas nos permiten aislar funcionalidades de nuestro  en nuestro código, es como tener pequeas versiones de nuestro código.

  Comandos de ramas:
  - git branch name_branch
  Esto crea una rama.

  - git checkout name_branch
  Esto me cambiar a la rama que le paso el nombre desde donde estamos.

  * git checkout -b rama
  Esta crea una rama y me la cambia automatocamente a ella.

  - git branch -d name_branch
  Me Elimina la rama que le pasamos el nombre a nivel local.

  - git branch -D name_branch
  Elimina la rama pero forzado. anivel local

  - git push origin --delete name_branch- Esto elimina las ramas en remoto.

  - git branch
  Lista las ramas del repositorio.

  - git branch --no-merged
  Lista las ramas no fusionadas a la rama actual.

  - git branch --merged
  Lista las ramas fusionadas a la rama actual.

  ---- Rebasar ramas ----
  Para rebsar las ramas debemos de primero hacer un checkout a la rama donde queremos hacer el rebae, luego tenemos que hacer el rebase a la rama principal o a la rama de donde vinimos, es decir tenemos user y main, estando en main podemos nosotros pasarnos a user con el ckeckout y luego aqui en el user hacer el rebase de la rama principal osea la main. commands:

  git checkout secondary-brach
  git rebase main-branch

    En los rebaes es importante darnos cuenta desde donde creamos nestras ramas, porque por ejm en una rama llamada user creamos la funcinoalidad del login, y noisotros estando en la rama del usuario creamos una nueva rama llamada login, esta rama nueva login tendra todo lo que tiene user incluyendo los archivos que hayamos enviado en ese momento, es decir, nosotros desde donde creamos la rama desde ahi tendra todos los archivos que creemos en la rama desde dinde creamos la nueva rama. Es decir la rama nueva que creamos toma la referencia de la rama desde donde la creamos.

! Fusiones (Merge) !.- Cuando hacemos las fuciones de ramas nos puede dar 2 tipos de salidad:
    1) Fast-Forwad.- La fusión se hace automática, es decir, no hay conflictos que resolver.

    2) Manual-merge.- La fusión hay que hacerla manual, para resolver conflictos de duplicación de contenido.

 Para fusionar lo que debemos de hacer es:
    1) Situarnos en la rama que se quedará con el contemido fusionado
        git checkout nombre_rama_que_quedara_con_todo_contenido
    2) Fucionarla.
        git merge nombre_rama_que_tiene_los_cambios_a_pasar
    3) Gacer un git push -u origin main para enviar los cambios.

  ! CAMBIOS COMMIT !.- Esto nos sirve en el caso que nosotros nos hayamos olvidado un línea de código en el último commit, y es común que hagamos un nuevo commit siempre que queremos hacer esto, pero existe un comando que nos permite agregar algo más de código al último commit sin necesidad de hacer otro commit ejm => :

  - git commit --amend --no-edit.
  Este comando edita el contenido pero no edita el mensaje del último commit.

  - git commit --amend -m "new_message".
  Este en cambio es para editar el contenido y el msg.

  - git reset --hard HEAD~1.- Este regresa al último commit que se haya dado si queremos descratar los cambios.

  Pasos de como hacer el amend:
    1) Hacer el cambio en nuestro código.
    2) Luego hacer un git add . para agregar esos cambios al stage.

    3) Lanzamos el git commit --amend cuakquiera de los dos comandos que vimos.
     4) Pero cabe recalcar que cuando usamos nostros el amend, como estamos queriendo hacer un cambio al commit ya hecho debemos de antes de hacer un push hacer un pull para traernos los cambios y veremos que vamos a tener conflictos en la rama porque hemos tocado el mismo commit por ende el mismo archivo hemos hecho el cambio. Tenemos que resolver los conflictos de la rama teniendo en cuenta los colores, cuando hay conflictos siempre el color verde es commit que esta llegando y el azul es como ya estaba antes el archivo. Casi siempre debemos de hacer primero un pull para poder nosotros traer esos cambio y poder arreglar conflictos.

     5) Como nosotros ya hicimos el push del primer commit que luego modificamos dan estos errores, entonces no nos queda otra que agregar un nuevo commit =>
     - git add .
     - git commit -m "new_message"
     - git push

    La mejor manera de manejar este amend, es cuando nosotros no hayamos hecho el push al remoto, es decir cuando hacemos el commit que este permanece en local.
    Cuando nosotros ya hemos hecho un push lo mas recomendable es mejor crear otro commit y un nuevo push sin el amend porque si no da conflictos siempre porque estamos intentando modificar un commit ya existente en remoto. El amend se usa siemore cuando los cambios los tenemos en local.

  ! REGISTRO DEL HISTORIAL !.-  x ejm =>


  # nos permite conocer todo elhistorial de un proyecto, con la información de la fecha el autor y id de cada cambio.
  - git log

  # Muestra en una sola línea por cambio.
  git log --oneline

  # guarda el log en la ruta y archivo que especifiquemos.
  git log > commits.txt

  # Muestra el historial con el formato que indiquemos.
  git log --pretty=format:"%h - %an, %ar : %s"

  # cambiamos la n por cualquier número entero y mostrará los n cambios recientes.
  git log -n

  # muestra los cambios realizados antes de la fecha especificada.
  git log --before="2019-07-08 00:00:00"

  # muestra los cambios realizados despúes de la fecha especificada.
  git log --after="2019-07-08 00:00:00"

  # muestra los cambios realizados en el rango de la fecha especificada.
  git log --after="2019-07-08 00:00:00" --before="2019-07-08 00:00:00"

  # Muestra todo el registro de acciones del log, incluyendo inserciones, cambios, eliminaciones, fusiones etc.
  git reflog

  # Diff entre el working directory y el staging area
  git diff

  # Muestra todo ramas, fusiones commits etc pero con los graficos parecido github.
  git log --oneline --graph --all
