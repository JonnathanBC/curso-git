!!! Git !!!.- Es un control de veriones para poder trabajar en base al mismo código diff desarrolladores donde podemos tener un mejor versionado y un código más controlado, nos permite también realizar acciones que podamos regresar el código anterior, mirar los cambios en nuestro código.

  ! CONFIGURACIONES !.- git config --global este -- global es porque estamos config git a todas las carpetas de nuestro sistema y para todo el SO. Aunque también podemos tener config a nivel de repositorios o proyectos.

    1.- Abrir una terminal de comandos.
    2.- Lanzamos:
      git config --global user.name "name_user". Este nombre saldran cuando hacemos algun cambio o commit.
    3.- Lanzamos :
      git config --global user.email "email_user".

    4.- Lanzamos:
      git config --global user.ui true.
      Esto activa los colores en la terminal.

    5.- git config --list

    #asignar a vsc como editor de conf de git
    6.- git config --global core.editor "code --wait". Siempre en vsc se abrira el archivo de confg global o a nivel de proyectos. Puede ser cualquier editor de codigo como atom, php storm etc etc solo cambiamos el code por el nombre del editor de código.

    7.- git config --global -e.
    Cons esto abrimos la config de git en el vsc o editor donde le hayamos editador.

    # Para estandarizar los saltos de linea en windows
    git config --global core.autocrlf true

    # Para estandarizar los saltos de linux en linux y mac
    git config --global core.autocrlf input

    # ver todas las opciones de la cong en la terminal
    git config -h

    # ver todas las opciones de la config en el navegador
    git help config

  ! INICIAR GIT EN UN DIRECTORIO LOCAL !.- 
    1.- Abrir una terminal.
    2.- Creamos una carpeta donde deseemos:
      mkdir name_folder

    3.- Debemos crear un gitignore que nos sirve para que los archivos que no queremos que se suban al repositorio, dentro de este archivo debemos de colocar las rutas dentro del archivo
      touch .gitignore

    4.- Lanzamos git init.
    Este comando sirve para inicializar git en un proyecto. En este carpeta cualquier cambio que yo haga aqui git va a poder trackear con los comandos de git.

    5.- Opcional el code ., esto es para que abra en vsc la carpeta que hemos creado.

  ! FLUJO BASICO !. Tenemos 4 estados, estado son los pasos por los cuales va pasando nuestro código, 3 de estos estados suceden en nuestras máquinas osea son estados locales, y el último en la plataforma donde estamos subiendo nuestro código sea github, gitlab etc.

    1) Modified.- Cuando estamos moficando nuesteo código. Este sucede en el directorio de trabajo

    2) Stage.- Cuando el código pasa a estar traqueado por git. 
    Para pasar del Working Directory al stage hay estos comandos:
      - git add . este primero añade todos los archivos que hemos modifcado.

      - git add nombre_file
    Aun estando en el stage podemos rechazar algunos cambios, esta es una zona donde estaremos trabajando usualmente

    3) Commit.- Ya cuando en la cabeza del repo de git tiene los cambios, es decir, estar al dia localmente.
    Para pasar del Stage al Commit hay el sig comando:
      - git commit -m "Message commit".
      Esto sirve para registra en el historico de nuestro proyecto, pasamos del stage a la cabeza del repo local en git. 

    4) Remote.- Cuando subimos el código al guna plataforma.
    Para pasar de commited al remote existe los sig comandos:
      - git push.- Para poder subir los cambios que hemoshecho al repositorio en remote.

      - git push -u origin name_branch.- Este es igual que el anterior si no que el -u lo que hace es enviar la rama al repo rmeoto si no hemos hecho al subida de la rama manual.

  Por ejm si un compañero realizo un cambio en nuestro código y lo subio a repo remoto, lo más recomnedable y lo que siempre se debe de hacer es descrgar los cambios, siempre como buena práctica, antes de empezar a trabajar o desarrollar es es descrgar los cambios del remoto al local.
  Esto lo podemos hacer con el comando:
    - git pull

  ! COMANDOS DE GIT !.-
    - git add . .- Añade todos los archivos modificados.
    - git add name_file.- Añade solo el archivo o carpeta que le pasemos como parametro.

    - git commit -m "Message".- Sirve para hacer el commit de los cambios.

    - git remote add origin url_git_repo.- Este nos permote a nosotros poder vincular el repositorio remoto con nuestro código en git. Así podremos realizar las acciones de push hacia el remoto.

    - git branch -M name_new_branch.- Este comando nos permite a nosotros cmabiar el nombre de nuestra rama, por defecto viene master, podemos cambiarle al nombre que se usa actualmente main quedaría :
      - git branch -M main

    - git push -u origin name_branch.- Este se usa casi siempre una vez por cada rama que nosotros creamos es decir i tenemos una rama en git que se llame users, esta rama esta a nivel local, enotonces nosotros debemos de enviar esa rama también al remoto para que sepa de donde vino ese código, entonces si no lo hacemos manualemente lanzamos el comando git push -u origin users x ejm.

    - git push.- Empuja los cambios al repo remoto.

    - git status
    Me indica el estado del los archivos mmodificados.

    - git log.- Me indica el commit anterior hecho hacia el remoto.

    - git pull.- Este nos permite obtener todos los cmabios que tenemos en el remoto hacia el local. Como buena oráctica debemos de siempre lanzar este comando para poder descragar los cmabios que estén hecho de nuestro equipo de desarrolo siempre siempre.

    Pasos para cambiar la rama master a main una vez hecho algun tipo de push al remoto:

    - git branch -m master main
      Crea la rama main y pasa el historial de la rama master a main.

    - git push -u origin main

    - git symbolic-ref refs/remotes/origin/HEAD refs/remotes/origin/main
    Este comando cambia el HEAD actual a la rama main.

    - Cambiar la rama default de master a main en tu repo de Git. 
    Entramos a github, vamos a settings del repositorio, Entramos a Settings/Branches buscamos un item que diga Default branch y ahi podemos intercambiar la rama a main para que sea la principal en nuestro repo. 

    - git push origin -delete master
    Esto elimina la rama master del reposritorio.

  ! GIT IGNORE !.- NOs sirve para poder ingnorar archivos que no queremos que se suban al remoto, podrían ser archivos de claves, llaves, apis etc etc. Necesitamos crear en la raiz de nuestro poryecto un archivo que se llame .gitignore y aqui podemos colocar los archivos que deseamos siendo slash(/) la raíz de nuestro proyecto ejm:
  
  .gitignore
  # Esto es un comentario
  archivo.net
  carpeta
  /archivo_desde_raiz.ext

  #ignora todos los archivos que terminen el log, el asterisco lo que hace es funcionar como una expresio regular donde le colocamos el asterico y dice todos los archivos que...
    *.log x ejm este indica que todos los archivos .log se ignoren

  # ! este simbolo lo que nos indica excepto, es decir, ignora otros excepto este ejm:
    !production.log excepto el achivo production.log.

  doc/*.text.- esta forma indica que ignore todos los archivo terminados en .txt dentro de la carpeta doc pero no es subscarpetas.

  doc/**/*.txt.- Ignorar todos los archivos terminados en .txt dentro la carpeta doc y tambien en sus subcarpeta.

  Existe una página llama gitignore.io, donde aqui le pasamos la tecnologia que estamos usando como node, php, react etc etc y nos devuelve un archivo con todos lo que se puede ignorar.